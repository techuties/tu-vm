services:
  # PostgreSQL Database (optimized)
  postgres:
    image: postgres:15-alpine
    container_name: ai_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_platform}
      POSTGRES_USER: ${POSTGRES_USER:-ai_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Performance optimization
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-256MB}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-100}
      # Security settings
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      ai_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai_admin} -d ${POSTGRES_DB:-ai_platform}"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Redis Cache (optimized)
  redis:
    image: redis:7-alpine
    container_name: ai_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory ${REDIS_MAXMEMORY:-256mb} --maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru} --save "" --appendonly no --tcp-keepalive 60
    volumes:
      - redis_data:/data
    networks:
      ai_network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Qdrant Vector Database (lightweight)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai_qdrant
    restart: unless-stopped
    # keep internal only; access via internal URLs or add an authenticated proxy if needed
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      ai_network:
        ipv4_address: 172.20.0.12
    # Healthcheck removed to avoid dependency on curl inside image.
    # External readiness is checked by scripts/start.sh and scripts/update.sh
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Ollama AI Models (on-demand)
  ollama:
    image: ollama/ollama:latest
    container_name: ai_ollama
    restart: unless-stopped
    # ports removed to enforce Nginx-only access (ollama.tu.local)
    volumes:
      - ollama_data:/root/.ollama
    networks:
      ai_network:
        ipv4_address: 172.20.0.13
    # Healthcheck removed to avoid dependency on curl inside image.
    # External readiness is checked by scripts/start.sh and scripts/update.sh
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Open WebUI (lightweight)
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ai_openwebui
    restart: unless-stopped
    environment:
      OLLAMA_BASE_URL: http://ollama:11434
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY:-webui_secret_key_2024}
      WEBUI_JWT_SECRET_KEY: ${WEBUI_JWT_SECRET_KEY:-jwt_secret_key_2024}
      DATABASE_URL: postgresql://${POSTGRES_USER:-ai_admin}:${POSTGRES_PASSWORD:-ai_password_2024}@postgres:5432/${POSTGRES_DB:-ai_platform}
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis_password_2024}@redis:6379
      # Mobile optimizations
      WEBUI_AUTH: "true"
      WEBUI_AUTH_SECRET: ${WEBUI_AUTH_SECRET:-auth_secret_2024}
      WEBUI_RATE_LIMIT: "50"
      WEBUI_RATE_LIMIT_WINDOW: "3600"
      # Reduce logging for battery
      LOG_LEVEL: "WARNING"
      # Disable telemetry
      ANONYMIZED_TELEMETRY: "false"
      DO_NOT_TRACK: "true"
      # PDF Processing with Tika
      PDF_LOADER: "TikaLoader"
      PDF_EXTRACT_IMAGES: "true"
      TIKA_SERVER_URL: "http://ai_tika:9998"
    networks:
      ai_network:
        ipv4_address: 172.20.0.14
    # Healthcheck removed to avoid dependency on curl inside image.
    # External readiness is checked by scripts/start.sh and scripts/update.sh
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Apache Tika for robust content extraction (used by Open WebUI)
  tika:
    image: apache/tika:latest
    container_name: ai_tika
    restart: unless-stopped
    environment:
      - JAVA_TOOL_OPTIONS=-Xms256m -Xmx512m
    networks:
      ai_network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1:9998"]
      interval: 30s
      timeout: 5s
      retries: 3
    dns:
      - 127.0.0.11
      - 172.20.0.16

  # MinIO Object Storage with GUI
  minio:
    image: minio/minio:latest
    container_name: ai_minio
    restart: unless-stopped
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console GUI
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio123456}
      MINIO_CONSOLE_ADDRESS: ":9001"
      MINIO_SERVER_URL: "https://api.minio.tu.local"
      MINIO_BROWSER_REDIRECT_URL: "https://minio.tu.local"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      ai_network:
        ipv4_address: 172.20.0.21
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # n8n Workflow Automation (lightweight)
  n8n:
    image: n8nio/n8n:latest
    container_name: ai_n8n
    restart: unless-stopped
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: n8n.${DOMAIN}
      N8N_PORT: 5678
      N8N_PROTOCOL: https
      WEBHOOK_URL: https://n8n.${DOMAIN}/
      GENERIC_TIMEZONE: Europe/Zurich
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b}
      # PostgreSQL Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-ai_platform}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-ai_admin}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-ai_password_2024}
      DB_POSTGRESDB_SCHEMA: n8n
      QDRANT_URL: http://qdrant:6333
      # Mobile optimizations
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      N8N_RUNNERS_ENABLED: "true"
      # Reduce logging for battery
      N8N_LOG_LEVEL: "warn"
      # Disable telemetry
      N8N_DIAGNOSTICS_ENABLED: "false"
      N8N_TELEMETRY_ENABLED: "false"
    # Prefer access via Nginx (443). If you need direct host access, re-add 5678 mapping.
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      ai_network:
        ipv4_address: 172.20.0.15
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://127.0.0.1:5678/healthz', r => process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Pi-hole for Ad Blocking & DNS Security (Primary DNS on port 53)
  pihole:
    image: pihole/pihole:latest
    container_name: ai_pihole
    restart: unless-stopped
    dns:
      - 1.1.1.1
      - 9.9.9.9
    ports:
      - "53:53/udp"
      - "53:53/tcp"
      - "8081:80"
    environment:
      TZ: 'Europe/Zurich'
      WEBPASSWORD: ${PIHOLE_PASSWORD:-'SwissPiHole2024!'}
      PIHOLE_DNS_: '1.1.1.1;9.9.9.9'
      DNSMASQ_USER: pihole
      VIRTUAL_HOST: "pihole.tu.local"
      PROXY_LOCATION: "pihole"
      ServerIP: "${HOST_IP}"
      DNSMASQ_LISTENING: all
      # Allow external queries
      DNSMASQ_INTERFACE: "eth0"
      DNSMASQ_BIND_INTERFACES: "false"
      DNSMASQ_LOCALISE_QUERIES: "false"
      # Block ads and trackers
      BLOCKING_ENABLED: "true"
      # Privacy features
      QUERY_LOGGING: "false"
      INSTALL_WEB_SERVER: "true"
      INSTALL_WEB_INTERFACE: "true"
      LIGHTTPD_ENABLED: "true"
      CACHE_SIZE: "10000"
    volumes:
      - pihole_data:/etc/pihole
      - pihole_dnsmasq:/etc/dnsmasq.d
      - ./pihole/01-custom.conf:/etc/dnsmasq.d/01-custom.conf:ro
    networks:
      ai_network:
        ipv4_address: 172.20.0.16
    healthcheck:
      test: ["CMD", "dig", "+norecurse", "+retry=0", "@127.0.0.1", "pi.hole"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'


  # Nginx Reverse Proxy (lightweight)
  nginx:
    image: nginx:alpine
    container_name: ai_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/html:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      ai_network:
        ipv4_address: 172.20.0.18
    depends_on:
      - helper_index
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Helper API for landing page (status + uploads)
  helper_index:
    image: python:3.11-alpine
    container_name: ai_helper_index
    restart: unless-stopped
    command: sh -c "pip install --no-cache-dir flask requests && python -u /app/uploader.py"
    volumes:
      - ./helper:/app
      - ./wg-configs:/data/wg-configs
      - ./ovpn-configs:/data/ovpn-configs
    environment:
      - UPLOAD_API_KEY=${UPLOAD_API_KEY}
      - HOST_IP=${HOST_IP}
      - VPN_WEBHOOK_ADDR=${VPN_WEBHOOK_ADDR}
      - VPN_WEBHOOK_PORT=${VPN_WEBHOOK_PORT}
      - VPN_WEBHOOK_TOKEN=${VPN_WEBHOOK_TOKEN}
      - GATEWAY_ENABLED=${GATEWAY_ENABLED}
    networks:
      ai_network:
        ipv4_address: 172.20.0.19
    extra_hosts:
      - "host.docker.internal:172.20.0.1"
    # no depends_on to avoid cycles with nginx
    dns:
      - 127.0.0.11
      - 172.20.0.16


  


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  ollama_data:
    driver: local
  minio_data:
    driver: local
  n8n_data:
    driver: local
  nginx_logs:
    driver: local
  pihole_data:
    driver: local
  pihole_dnsmasq:
    driver: local

networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1 