services:
  # PostgreSQL Database (lightweight)
  postgres:
    image: postgres:15-alpine
    container_name: ai_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_platform}
      POSTGRES_USER: ${POSTGRES_USER:-ai_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ai_password_2024}
      # Optimize for mobile usage
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      ai_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai_admin} -d ${POSTGRES_DB:-ai_platform}"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Redis Cache (lightweight)
  redis:
    image: redis:alpine
    container_name: ai_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_2024} --maxmemory 256mb --maxmemory-policy allkeys-lru --save "" --appendonly no
    volumes:
      - redis_data:/data
    networks:
      ai_network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Qdrant Vector Database (lightweight)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai_qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      ai_network:
        ipv4_address: 172.20.0.12
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Ollama AI Models (on-demand)
  ollama:
    image: ollama/ollama:latest
    container_name: ai_ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      ai_network:
        ipv4_address: 172.20.0.13
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 120s
      timeout: 30s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Open WebUI (lightweight)
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ai_openwebui
    restart: unless-stopped
    environment:
      OLLAMA_BASE_URL: http://ollama:11434
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY:-webui_secret_key_2024}
      WEBUI_JWT_SECRET_KEY: ${WEBUI_JWT_SECRET_KEY:-jwt_secret_key_2024}
      DATABASE_URL: postgresql://${POSTGRES_USER:-ai_admin}:${POSTGRES_PASSWORD:-ai_password_2024}@postgres:5432/${POSTGRES_DB:-ai_platform}
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis_password_2024}@redis:6379
      # Mobile optimizations
      WEBUI_AUTH: "true"
      WEBUI_AUTH_SECRET: ${WEBUI_AUTH_SECRET:-auth_secret_2024}
      WEBUI_RATE_LIMIT: "50"
      WEBUI_RATE_LIMIT_WINDOW: "3600"
      # Reduce logging for battery
      LOG_LEVEL: "WARNING"
      # Disable telemetry
      ANONYMIZED_TELEMETRY: "false"
      DO_NOT_TRACK: "true"
    networks:
      ai_network:
        ipv4_address: 172.20.0.14
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # n8n Workflow Automation (lightweight)
  n8n:
    image: n8nio/n8n:latest
    container_name: ai_n8n
    restart: unless-stopped
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-admin123}
      N8N_HOST: ai.tu.local
      N8N_PORT: 5678
      N8N_PROTOCOL: https
      WEBHOOK_URL: http://ai_n8n:5678
      GENERIC_TIMEZONE: Europe/Zurich
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b}
      # PostgreSQL Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n_db
      DB_POSTGRESDB_USER: n8n_user
      DB_POSTGRESDB_PASSWORD: n8n_password_2024
      DB_POSTGRESDB_SCHEMA: public
      QDRANT_URL: http://qdrant:6333
      # Mobile optimizations
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      N8N_RUNNERS_ENABLED: "true"
      # Reduce logging for battery
      N8N_LOG_LEVEL: "warn"
      # Disable telemetry
      N8N_DIAGNOSTICS_ENABLED: "false"
      N8N_TELEMETRY_ENABLED: "false"
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      ai_network:
        ipv4_address: 172.20.0.15
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Pi-hole for Ad Blocking & DNS Security
  pihole:
    image: pihole/pihole:latest
    container_name: ai_pihole
    restart: unless-stopped
    dns:
      - 8.8.8.8
      - 1.1.1.1
    ports:
      - "0.0.0.0:53:53/udp"
      - "0.0.0.0:53:53/tcp"
      - "8081:80"
    environment:
      TZ: 'Europe/Zurich'
      WEBPASSWORD: ${PIHOLE_PASSWORD:-'SwissPiHole2024!'}
      PIHOLE_DNS_: '1.1.1.1;1.0.0.1'
      DNSMASQ_USER: pihole
      VIRTUAL_HOST: "pihole.tu.local"
      PROXY_LOCATION: "pihole"
      ServerIP: "10.211.55.12"
      DNSMASQ_LISTENING: all
      # Allow external queries
      DNSMASQ_INTERFACE: "eth0"
      DNSMASQ_BIND_INTERFACES: "false"
      DNSMASQ_LOCALISE_QUERIES: "false"
      # Block ads and trackers
      BLOCKING_ENABLED: "true"
      # Privacy features
      QUERY_LOGGING: "false"
      INSTALL_WEB_SERVER: "true"
      INSTALL_WEB_INTERFACE: "true"
      LIGHTTPD_ENABLED: "true"
      CACHE_SIZE: "10000"
    volumes:
      - pihole_data:/etc/pihole
      - pihole_dnsmasq:/etc/dnsmasq.d
      - ./pihole/01-custom.conf:/etc/dnsmasq.d/01-custom.conf:ro
    networks:
      ai_network:
        ipv4_address: 172.20.0.16
    healthcheck:
      test: ["CMD", "dig", "+norecurse", "+retry=0", "@127.0.0.1", "pi.hole"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'


  # WireGuard VPN for Host Security
  wireguard:
    image: linuxserver/wireguard:latest
    container_name: ai_wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - SERVERURL=auto
      - SERVERPORT=51820
      - PEERS=1
      - PEERDNS=auto
      - INTERNAL_SUBNET=10.13.13.0
      - ALLOWEDIPS=0.0.0.0/0
      - PERSISTENTKEEPALIVE_PEERS=all
      - LOG_CONFS=true
    volumes:
      - wireguard_config:/config
      - /lib/modules:/lib/modules
    ports:
      - "51820:51820/udp"
    networks:
      ai_network:
        ipv4_address: 172.20.0.17
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "1.1.1.1"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    dns:
      - 127.0.0.11
      - 172.20.0.16


  # Nginx Reverse Proxy (lightweight)
  nginx:
    image: nginx:alpine
    container_name: ai_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      ai_network:
        ipv4_address: 172.20.0.18
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 60s
      timeout: 10s
      retries: 2
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    dns:
      - 127.0.0.11
      - 172.20.0.16


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  ollama_data:
    driver: local
  n8n_data:
    driver: local
  nginx_logs:
    driver: local
  pihole_data:
    driver: local
  pihole_dnsmasq:
    driver: local
  wireguard_config:
    driver: local

networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1 