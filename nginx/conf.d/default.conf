# HTTP to HTTPS redirect for tu.local
server {
    listen 80;
    server_name tu.local;
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS for tu.local (Landing Page)
server {
    listen 443 ssl;
    http2 on;
    server_name tu.local;

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    # disable stapling for self-signed cert
    # ssl_stapling on;
    # ssl_stapling_verify on;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location = /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Same-origin service health proxies for landing page status (avoid CORS)
    location /status/oweb {
        proxy_pass http://172.20.0.14:8080/health;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header Access-Control-Allow-Origin "*" always;
    }
    location /status/n8n {
        proxy_pass http://172.20.0.15:5678/healthz;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header Access-Control-Allow-Origin "*" always;
    }
    location /status/pihole {
        proxy_pass http://172.20.0.16/admin/;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header Access-Control-Allow-Origin "*" always;
    }

    # Optional: expose nginx access log for basic viewing
    location /logs/access {
        default_type text/plain;
        add_header Content-Type text/plain;
        add_header Access-Control-Allow-Origin "*" always;
        alias /var/log/nginx/access.log;
    }

    root /usr/share/nginx/html;
    index index.html;

    location / {
        try_files $uri /index.html;
    }
}

# HTTP to HTTPS redirect for n8n.tu.local
server {
    listen 80;
    server_name n8n.tu.local;
    location / {
        return 301 https://$server_name$request_uri;
    }
}
# HTTP to HTTPS redirect for oweb.tu.local
server {
    listen 80;
    server_name oweb.tu.local;
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTP to HTTPS redirect for ollama.tu.local
server {
    listen 80;
    server_name ollama.tu.local;
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS for n8n.tu.local (n8n)
server {
    listen 443 ssl;
    http2 on;
    server_name n8n.tu.local;

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    # ssl_stapling on;
    # ssl_stapling_verify on;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        proxy_connect_timeout 5s;
        proxy_read_timeout 60s;
        proxy_send_timeout 15s;
        client_max_body_size 20m;
        proxy_pass http://172.20.0.15:5678/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# HTTP to HTTPS redirect for pihole.tu.local
server {
    listen 80;
    server_name pihole.tu.local;
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS for pihole.tu.local (Pi-hole)
# HTTPS for oweb.tu.local (Open WebUI)
server {
    listen 443 ssl;
    http2 on;
    server_name oweb.tu.local;

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    # ssl_stapling on;
    # ssl_stapling_verify on;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        proxy_connect_timeout 5s;
        proxy_read_timeout 60s;
        proxy_send_timeout 15s;
        client_max_body_size 20m;
        proxy_pass http://172.20.0.14:8080/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        # No rate limit for static-heavy UI
    }

    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# HTTPS for ollama.tu.local (Ollama API)
server {
    listen 443 ssl;
    http2 on;
    server_name ollama.tu.local;

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    # ssl_stapling on;
    # ssl_stapling_verify on;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Streaming/SSE safe proxy settings
    location / {
        proxy_connect_timeout 5s;
        proxy_read_timeout 3600s;
        proxy_send_timeout 300s;
        proxy_buffering off;
        proxy_request_buffering off;
        client_max_body_size 100m;
        proxy_pass http://172.20.0.13:11434/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
server {
    listen 443 ssl;
    http2 on;
    server_name pihole.tu.local;

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        proxy_connect_timeout 5s;
        proxy_read_timeout 60s;
        proxy_send_timeout 15s;
        client_max_body_size 20m;
        proxy_pass http://172.20.0.16:80/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
} 